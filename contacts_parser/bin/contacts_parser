#!/usr/bin/env ruby
require "contacts_parser"
require "optparse"

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: contacts_parser <filename> [options] OR contacts_parser --server [options]"

  opts.separator "\nCommand line options:"

  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end

  opts.on("-i", "--invalid FILE", "Specify a file to write invalid results to") do |file|
    options[:invalid] = file
  end

  opts.on("-o FILE", "--output FILE", "Specify the output file") do |file|
    options[:output] = file
  end

  opts.on("-v", "--verbose", "Enable verbose output") do
    options[:verbose] = true
  end

  opts.on("-di", "--display-invalid", "With `-v`, prints the list of removed records after processing") do
    options[:display_invalid] = true
  end

  opts.separator "\nServer options: (Note, using the `-s` flag will override any of the above arguments)"

  opts.on("-s", "--server", "Enable web server") do
    options[:server] = true
  end

  opts.on("-b HOSTNAME", "--bind HOSTNAME", "Specify hostname for server") do |hostname|
    options[:bind] = hostname
  end

  opts.on("-p PORT", "--port PORT", "Specify server listening port") do |port|
    options[:port] = port
  end
end.parse!

if options[:server]
  ContactsParser.server(options)
else
  # Verify file settings and execute parser

  # Check for filename
  if ARGV.length == 0
    puts "No input file provided.\nRun `contacts_parser -h` to see usage details."
    exit 1
  end

  # Get input filename
  options[:input] = ARGV[0]

  # Ensure output filename is set
  options[:output] ||= "#{options[:input]}.json"

  parser = ContactsParser::Parse.new(options)
  parser.run
end